// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using LionPetManagement_Repositories_DoanNgocTrung.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace LionPetManagement_Repositories_DoanNgocTrung.DBContext;

public partial class SU25LionDBContext : DbContext
{
    public SU25LionDBContext()
    {
    }

    public SU25LionDBContext(DbContextOptions<SU25LionDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<LionAccount> LionAccounts { get; set; }

    public virtual DbSet<Models.LionProfile> LionProfiles { get; set; }

    public virtual DbSet<LionType> LionTypes { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // Use default tracking behavior for better update support
        optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));
    }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=ZUNZUN;Initial Catalog=SU25LionDB;Persist Security Info=True;User ID=SA;Password=12345");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<LionAccount>(entity =>
        {
            entity.HasKey(e => e.AccountId);

            entity.ToTable("LionAccount");

            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Password).HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Models.LionProfile>(entity =>
        {
            entity.ToTable("LionProfile");

            entity.Property(e => e.Characteristics)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.LionName)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Warning)
                .IsRequired()
                .HasMaxLength(1500);

            entity.HasOne(d => d.LionType).WithMany(p => p.LionProfiles)
                .HasForeignKey(d => d.LionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LionProfile_LionType");
        });

        modelBuilder.Entity<LionType>(entity =>
        {
            entity.ToTable("LionType");

            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.LionTypeName).HasMaxLength(250);
            entity.Property(e => e.Origin).HasMaxLength(250);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}